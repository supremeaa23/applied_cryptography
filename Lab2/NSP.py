import sys
import uuid
from Crypto.Random import get_random_bytes
from Crypto.Util import number
from Kuznechik import encrypt_kuznechik, decrypt_kuznechik
import logging

BLOCK_LENGTH = 16
EXIT_CODE = 1

logging.basicConfig(level=logging.INFO, format="[%(levelname)s] %(message)s")
logger = logging.getLogger("Needham ‚Äì Schroeder Protocol")


def decrease_nonce(nonce: bytes) -> bytes:
    # —É–º–µ–Ω—å—à–∞–µ–º –±–∞–π—Ç–æ–≤–æ–µ —á–∏—Å–ª–æ –Ω–∞ 1
    return number.long_to_bytes(number.bytes_to_long(nonce) - 1)


class NSPVerificationCenter:
    def __init__(self):
        self._db = {}

    def _check_usr_in_db(self, *args: uuid.UUID) -> None:
        # –µ—Å–ª–∏ –∫–∞–∫–æ–π-—Ç–æ –∏–∑ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–¥ - –∫–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
        for usr_id in args:
            if usr_id not in self._db:
                logger.error(f"User {usr_id} not in database")

    def register_usr(self, usr: "NSPClient") -> None:
        # —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –µ—Å—Ç—å –≤ –±–¥ - –∫–∏–¥–∞–µ–º –æ—à–∏–±–∫—É
        if usr.get_id() in self._db:
            logger.error(f"User {usr.get_id()} already exists")
        self._db[usr.get_id()] = usr.get_key()

    def verify_communication(self, companion_1_id: uuid.UUID, companion_2_id: uuid.UUID, nonce_1: bytes) -> bytes:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é –∑–∞ —Å—á–µ—Ç –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î.
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –µ—Å—Ç—å –≤ –ë–î, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ–∞–Ω—Å–æ–≤—ã–π –∫–ª—é—á –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é,
        # –≤–∏–¥–∞: ùëÄ = ùê∏at(ùëÅ,ùêµ,ùêæ,ùê∏bt(ùêæ,ùê¥))
        self._check_usr_in_db()
        session_key = get_random_bytes(2 * BLOCK_LENGTH)
        plain_text = nonce_1 + companion_2_id.bytes + session_key + encrypt_kuznechik(key=self._db[companion_2_id],
                                                                                      plain_text=session_key +
                                                                                      companion_1_id.bytes)
        m1 = encrypt_kuznechik(key=self._db[companion_1_id],
                               plain_text=plain_text)
        return m1


class NSPClient:
    def __init__(self, usr_id=None):
        self._id = uuid.uuid4() if usr_id is None else usr_id
        self._key = get_random_bytes(2 * BLOCK_LENGTH)
        self._nonce = None
        self._session_key = None

    def get_id(self) -> uuid.UUID:
        # –ø–æ–ª—É—á–µ–Ω–∏–µ id –∫–ª–∏–µ–Ω—Ç–∞
        return self._id

    def get_key(self) -> bytes:
        # –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –∫–ª—é—á–∞ –∫–ª–∏–µ–Ω—Ç–∞
        return self._key

    def _set_nonce(self) -> None:
        # –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ —á–∏—Å–ª–∞
        self._nonce = get_random_bytes(2 * BLOCK_LENGTH)

    def _set_session_key(self, session_key) -> None:
        # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∫–ª—é—á
        self._session_key = session_key

    def register(self, vcenter: NSPVerificationCenter):
        vcenter.register_usr(self)

    def communicate_initiate(self, companion: "NSPClient", vcenter: NSPVerificationCenter) -> bytes:
        # –∏–Ω–∏—Ü–∏–∞—Ü–∏—è –æ–±—â–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        # –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ, –ø–µ—Ä–µ–¥–∞–µ–º —É–¥–æ—Å—Ç–æ–≤–µ—Ä—è—é—â–µ–º—É —Ü–µ–Ω—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º id, id —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
        # –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ
        # –ø–æ–ª—É—á–∞–µ–º –æ—Ç –£–¶ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, –≤–∏–¥–∞: ùê∏at(ùëÅ,ùêµ,ùêæ,ùê∏bt(ùêæ,ùê¥))
        self._set_nonce()
        companion._set_nonce()
        logger.info(f"Initiate communication between {self.get_id()} and {companion.get_id()}")
        return vcenter.verify_communication(self.get_id(), companion.get_id(), self._nonce)

    def m0_transfer_to_companion(self, companion: "NSPClient", m1: bytes) -> None:
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º m0 —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É,
        # —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ–±–µ —Å–µ–∞–Ω—Å–æ–≤—ã–π –∫–ª—é—á
        plain_text = decrypt_kuznechik(key=self._key, cipher_text=m1)
        concat = plain_text[len(self._nonce) + len(companion.get_id().bytes):]
        self._set_session_key(concat[:2 * BLOCK_LENGTH])
        m0 = concat[2 * BLOCK_LENGTH:]
        companion.get_session_key(m0)

    def get_session_key(self, m0: bytes) -> None:
        # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ m0
        try:
            plain_text = decrypt_kuznechik(key=self._key, cipher_text=m0)
            self._set_session_key(plain_text[:2 * BLOCK_LENGTH])
        except (IndexError, ValueError):
            logger.error("Key didn't establish")
            return None

    def transfer_encrypt_nonce_to_companion(self, companion: "NSPClient"):
        # –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —á–∏—Å–ª–æ
        try:
            encrypt_nonce = encrypt_kuznechik(key=self._session_key, plain_text=self._nonce)
            companion.transfer_modify_nonce(self, encrypt_nonce)
        except (IndexError, ValueError):
            logger.error("Key didn't establish")
            return None

    def transfer_modify_nonce(self, companion: "NSPClient", encrypt_companion_nonce: bytes):
        # –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        plain_nonce = decrypt_kuznechik(key=self._session_key, cipher_text=encrypt_companion_nonce)
        modify_nonce = decrease_nonce(plain_nonce)
        companion.accept_modify_nonce(encrypt_modify_nonce=encrypt_kuznechik(key=self._session_key,
                                                                             plain_text=modify_nonce))

    def accept_modify_nonce(self, encrypt_modify_nonce: bytes):
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –æ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
        modify_nonce = decrease_nonce(self._nonce)
        decrypt_responce = decrypt_kuznechik(key=self._session_key, cipher_text=encrypt_modify_nonce)
        if modify_nonce == decrypt_responce:
            logger.info(f"Established key: {self._session_key}")
        else:
            logger.error(f"Key didn't establish")
            return None

    def exchange_keys(self, companion: "NSPClient", vcenter: NSPVerificationCenter):
        # –æ–±–º–µ–Ω–∏–≤–∞–µ–º—Å—è –∫–ª—é—á–∞–º–∏
        m1 = self.communicate_initiate(companion, vcenter)
        self.m0_transfer_to_companion(companion, m1)
        companion.transfer_encrypt_nonce_to_companion(self)


if __name__ == "__main__":
    try:
        Alice = NSPClient()
        Bob = NSPClient()
        VC = NSPVerificationCenter()
        Alice.register(VC)
        Bob.register(VC)
        Eva = NSPClient(Bob.get_id())
        Alice.exchange_keys(Bob, VC)
        Alice.exchange_keys(Bob, VC)
        Eva.exchange_keys(Alice, VC)
        Alice.exchange_keys(Bob, VC)
        Alice.exchange_keys(Eva, VC)
        Alice.exchange_keys(Bob, VC)
    except Exception as exp:
        logger.exception(exp)
        sys.exit(EXIT_CODE)
